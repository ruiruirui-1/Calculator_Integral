package calusee;
import java.util.*;
public class test2 {
	 public static void main(String[] args) {
	       //Testcase
	    }

	    public static String integrate(String expr) {
	        List<String> terms = splitTerms(expr);
	        List<String> integratedTerms = new ArrayList<>();
		// 个项积分
	        for (String term : terms) {
	            String integratedTerm = integrateTerm(term);
	            if (!integratedTerm.isEmpty()) {
	                integratedTerms.add(integratedTerm);
	            }
	        }
	        if (integratedTerms.isEmpty()) {
	            return "0";
	        }
	        String result = String.join(" + ", integratedTerms);
	        result = result.replace("+ -", "- ");
	        if (result.startsWith("+ ")) {
	            result = result.substring(2);
	        }
	        return result;
	    }

	    private static List<String> splitTerms(String expr) {
	        List<String> terms = new ArrayList<>();
	        if (expr.isEmpty()) {
	            return terms;
	        }
	        int start = 0;
	        for (int i = 1; i < expr.length(); i++) {
	            char c = expr.charAt(i);
	            if (c == '+' || c == '-') {
	                terms.add(expr.substring(start, i));
	                start = i;
	            }
	        }
	        terms.add(expr.substring(start));
	        return terms;
	    }
	    //单项积分
	    private static String integrateTerm(String term) {
	        if (term.isEmpty()) return "";

	        int sign = 1;
	        int numStart = 0;
	        if (term.charAt(0) == '-') {
	            sign = -1;
	            numStart = 1;
	        } else if (term.charAt(0) == '+') {
	            numStart = 1;
	        }

	        String remaining = term.substring(numStart);
	        if (remaining.isEmpty()) return "";

	        if (!remaining.contains("x")) { // 常数项
	            int coeff = parseInt(remaining) * sign;
	            return formatIntegratedTerm(coeff, 1, 1);
	        }

	        String[] parts = remaining.split("x", 2);
	        int coeff = parts[0].isEmpty() ? sign : parseInt(parts[0]) * sign;
	        int exponent = parseExponent(parts);

	        return formatIntegratedTerm(coeff, exponent + 1, exponent + 1);
	    }

	    private static int parseExponent(String[] parts) {
	        if (parts.length < 2 || parts[1].isEmpty()) return 1;
	        if (parts[1].charAt(0) != '^') return 1;
	        try {
	            return Integer.parseInt(parts[1].substring(1));
	        } catch (NumberFormatException e) {
	            return 1;
	        }
	    }

	    private static String formatIntegratedTerm(int coeff, int denominator, int exponent) {
	        int common = gcd(coeff, denominator);
	        int numerator = coeff / common;
	        denominator /= common;
		//特殊情况
	        if (denominator < 0) {
	            numerator *= -1;
	            denominator *= -1;
	        }

	        StringBuilder sd = new StringBuilder();
	        String xPart = exponent == 1 ? "x" : "x^" + exponent;

	        if (denominator == 1) {
	            if (numerator == 1) return xPart;
	            if (numerator == -1) return "-" + xPart;
	            return numerator + xPart;
	        }

	        String numPart = switch (numerator) {
	            case 1 -> xPart;
	            case -1 -> "-" + xPart;
	            default -> numerator + xPart;
	        };

	        return "(" + numPart + ")/" + denominator;
	    }

	    private static int gcd(int a, int b) {
	        a = Math.abs(a);
	        b = Math.abs(b);
	        while (b != 0) {
	            int temp = b;
	            b = a % b;
	            a = temp;
	        }
	        return a;
	    }

	    private static int parseInt(String s) {
	        try {
	            return Integer.parseInt(s);
	        } catch (NumberFormatException e) {
	            return 1;
	        }
	    }
}
